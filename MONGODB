Here is use command 
To install MongoDB server on your Kali Linux system, you can follow these steps:

1. **Update Package Lists**: It's a good practice to update your package lists to ensure you're installing the latest versions of software. Run the following command:
   ```
   sudo apt-get update
   ```

2. **Install MongoDB**: Once your package lists are updated, you can install MongoDB by running:
   ```
   sudo apt-get install mongodb
   ```

3. **Start MongoDB Service**: After the installation is complete, MongoDB should start automatically. If it doesn't, you can start the MongoDB service manually with:
   ```
   sudo service mongodb start
   ```

4. **Verify MongoDB Installation**: You can verify that MongoDB is installed and running correctly by checking its status:
   ```
   sudo service mongodb status
   ```

5. **Enable MongoDB Service (Optional)**: If you want MongoDB to start automatically at boot, you can enable the service with:
   ```
   sudo systemctl enable mongodb
   ```

6. **Test MongoDB Connection**: You can also test the MongoDB server by connecting to it using the MongoDB shell:
   ```
   mongo
   ```
   This command will launch the MongoDB shell. If it connects successfully, you'll see the MongoDB shell prompt.
7.  sudo ufw allow 27017 in write this command in terminal :

Once you've completed these steps, MongoDB server should be installed and running on your Kali Linux system. You can then connect to it using MongoDB Compass or any other MongoDB client.


Here is code to connect react to mongodb 

const { MongoClient } = require('mongodb');

// Connection URI
const uri = 'mongodb://localhost:27017';

// Create a new MongoClient
const client = new MongoClient(uri);

async function main() {
  try {
    // Connect the client to the server
    await client.connect();
    console.log('Connected to MongoDB');
    
    // Your code for storing data in GridFS will go here

  } finally {
    // Close the connection when done
    await client.close();
    console.log('Disconnected from MongoDB');
  }
}

main().catch(console.error);




Here is code to upload img file's in mongodb 

// Access the database
const database = client.db('mydatabase');

// Access the GridFS bucket
const bucket = new mongodb.GridFSBucket(database);

// Define the path to the file you want to store
const filePath = '/path/to/your/file.jpg';

// Create a readable stream from the file
const readableStream = fs.createReadStream(filePath);

// Create an upload stream to store the file in GridFS
const uploadStream = bucket.openUploadStream('file.jpg');

// Pipe the data from the readable stream to the upload stream
readableStream.pipe(uploadStream);

// Handle events (optional)
uploadStream.on('error', (error) => {
  console.error('Error uploading file:', error);
});

uploadStream.on('finish', () => {
  console.log('File uploaded successfully');
});

//Clean up 
// Handle errors
uploadStream.on('error', (error) => {
  console.error('Error uploading file:', error);
});

// Close the MongoDB client connection
await client.close();











import React, { useState } from 'react';
import axios from 'axios';

const ImageUpload = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');

  const handleFileChange = (event) => {
    setSelectedFile(event.target.files[0]);
  };

  const handleTitleChange = (event) => {
    setTitle(event.target.value);
  };

  const handleDescriptionChange = (event) => {
    setDescription(event.target.value);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    const formData = new FormData();
    formData.append('image', selectedFile);
    formData.append('title', title);
    formData.append('description', description);

    try {
      const response = await axios.post('http://localhost:5000/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      console.log(response.data);
    } catch (error) {
      console.error('Error uploading the image:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="file" onChange={handleFileChange} required />
      <input type="text" value={title} onChange={handleTitleChange} placeholder="Title" required />
      <textarea value={description} onChange={handleDescriptionChange} placeholder="Description" required />
      <button type="submit">Upload</button>
    </form>
  );
};

export default ImageUpload;



npm install express multer mongoose gridfs-stream






const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const { GridFsStorage } = require('multer-gridfs-storage');
const Grid = require('gridfs-stream');
const bodyParser = require('body-parser');
const app = express();
const path = require('path');
const crypto = require('crypto');

// Middleware
app.use(bodyParser.json());

// Mongo URI
const mongoURI = 'mongodb://localhost:27017/yourdatabase';

// Create mongo connection
const conn = mongoose.createConnection(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Init gfs
let gfs;
conn.once('open', () => {
  // Init stream
  gfs = Grid(conn.db, mongoose.mongo);
  gfs.collection('uploads');
});

// Create storage engine
const storage = new GridFsStorage({
  url: mongoURI,
  file: (req, file) => {
    return new Promise((resolve, reject) => {
      crypto.randomBytes(16, (err, buf) => {
        if (err) {
          return reject(err);
        }
        const filename = buf.toString('hex') + path.extname(file.originalname);
        const fileInfo = {
          filename: filename,
          bucketName: 'uploads'
        };
        resolve(fileInfo);
      });
    });
  }
});

const upload = multer({ storage });

// Image Schema
const ImageSchema = new mongoose.Schema({
  title: String,
  description: String,
  imageId: String,
});

const Image = mongoose.model('Image', ImageSchema);

app.post('/upload', upload.single('image'), async (req, res) => {
  try {
    const newImage = new Image({
      title: req.body.title,
      description: req.body.description,
      imageId: req.file.id,
    });

    await newImage.save();

    res.send({ message: 'File uploaded and data saved successfully', data: newImage });
  } catch (error) {
    res.status(500).send('Error uploading the file and saving data.');
  }
});

// Retrieve image
app.get('/image/:id', async (req, res) => {
  try {
    const file = await gfs.files.findOne({ _id: mongoose.Types.ObjectId(req.params.id) });
    if (!file || file.length === 0) {
      return res.status(404).json({ err: 'No file exists' });
    }

    const readstream = gfs.createReadStream(file.filename);
    readstream.pipe(res);
  } catch (err) {
    res.status(500).send(err);
  }
});

app.listen(5000, () => {
  console.log('Server started on port 5000');
});

